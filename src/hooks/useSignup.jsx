import { useState, useEffect } from 'react'
import { projectAuth, projectStorage, projectFirestore } from '../firebase/config'
import { useAuthContext } from './useAuthContext'

export const useSignup = () => {
    // For avoiding unmount component
    const [isCancelled, setIsCancelled] = useState(false)

    const [error, setError] = useState(null)
    const [isPending, setIsPending] = useState(false)
    const { dispatch } = useAuthContext()

    const signup = async (email, password, displayName, thumbnail) => {
        setError(null)
        setIsPending(true)

        try {
            // Signup user
            const res = await projectAuth.createUserWithEmailAndPassword(email, password)

            if (!res) {
                throw new Error("Could not complete signup")
            }

            // Upload user thumbnail
            const uploadPath = `thumbnails/${res.user.uid}/${thumbnail.name}`
            const photo = await projectStorage.ref(uploadPath).put(thumbnail)
            const photoURL = await photo.ref.getDownloadURL()

            // Add display name and avatar thumbnail to user
            await res.user.updateProfile({ displayName, photoURL })

            // Create a user document, make sure the id is user.uid (and not auto generated by firebase), then update the document using set() will the info about the user
            await projectFirestore.collection("users").doc(res.user.uid).set({
                online: true,
                displayName,
                photoURL
            })

            // Dispatch login action
            dispatch({ type: 'LOGIN', payload: res.user })
            
            // Update state
            if (!isCancelled) {
                setIsPending(false)
                setError(null)
            }
        } 
        catch (err){
            if (!isCancelled) {
                console.log(err.message)
                setError(err.message)
                setIsPending(false)
            }
        }
    }

    useEffect(() => {
        return () => setIsCancelled(true)
      }, [])

    return { error, isPending, signup }
}